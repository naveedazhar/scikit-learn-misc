Scikit-learn is a popular machine learning library in Python that provides a wide range of tools for working with machine learning algorithms, including classification, regression, clustering, dimensionality reduction, and more. Here are some basic examples of how to use scikit-learn for common machine learning tasks:

1. Installing scikit-learn:

You can install scikit-learn using pip:

bash

pip install scikit-learn

2. Importing the Library:

You need to import the sklearn module and relevant submodules for the specific machine learning task you want to perform:

python

import sklearn
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

3. Loading a Sample Dataset:

Scikit-learn provides several sample datasets for practice. Here, we'll use the Iris dataset as an example:

python

# Load the Iris dataset
data = load_iris()
X, y = data.data, data.target

4. Splitting the Data into Training and Testing Sets:

You typically split your data into a training set and a testing set for model evaluation:

python

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

5. Building and Training a Machine Learning Model:

In this example, we'll use logistic regression to build a simple classification model:

python

# Create and train the logistic regression model
model = LogisticRegression(max_iter=10000)
model.fit(X_train, y_train)

6. Making Predictions:

You can use the trained model to make predictions on the testing data:

python

y_pred = model.predict(X_test)

7. Evaluating the Model:

You can evaluate the model's performance using various metrics, such as accuracy and classification report:

python

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

report = classification_report(y_test, y_pred, target_names=data.target_names)
print("Classification Report:\n", report)

8. Other Machine Learning Tasks:

Scikit-learn provides tools for various machine learning tasks, including regression, clustering, dimensionality reduction, and more. You can explore these tasks by importing the relevant modules and following similar patterns to the classification example.

Here's a quick example of performing k-means clustering:

python

from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=3, random_state=0)
kmeans.fit(X)
labels = kmeans.labels_

9. Saving and Loading Models:

You can save a trained model to disk and load it later for inference:

python

from joblib import dump, load

# Save the model
dump(model, 'my_model.joblib')

# Load the model
loaded_model = load('my_model.joblib')

# Use the loaded model for predictions
new_predictions = loaded_model.predict(X_test)

These are basic examples of how to use scikit-learn for machine learning tasks like classification and clustering. Scikit-learn is a comprehensive library with many features and algorithms, so be sure to refer to the official documentation for more advanced use cases and details on each algorithm: scikit-learn Documentation.
